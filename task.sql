-- Skript pro vytvoreni databaze pouzite v prikladech

DROP TABLE  "Person" cascade constraints purge ;
DROP TABLE  "Employee";
DROP TABLE  "Passenger" cascade constraints  purge ;

DROP TABLE  "Ticket" cascade constraints  ;
 DROP TABLE  "Reservation";
DROP TABLE  "Seat" cascade constraints  ;
DROP TABLE  "Airline" cascade constraints;
DROP TABLE "Aircraft" cascade constraints;
DROP TABLE  "Airport" cascade constraints;
DROP TABLE  "Flight";
DROP MATERIALIZED VIEW "reservation_by_season";



-- The "Person" table is the base table that represents the generalized entity.
-- It contains common attributes for specialized entities such as "Employee" and "Passenger".
-- "PersonID" serves as the primary key and will be used as a foreign key in specialized tables.

CREATE TABLE "Person" (
    "PersonID" NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1) NOT NULL PRIMARY KEY ,
    "FirstName" VARCHAR2(80) NOT NULL,
    "LastName" VARCHAR2(80) NOT NULL,
    "Email" VARCHAR2(40) NOT NULL,
    UNIQUE ("Email"),
    "Phone" INT NOT NULL,
    "Address" VARCHAR2(100) NOT NULL,
    "Nationality" VARCHAR2(100) NOT NULL,
    "PassNumber" VARCHAR2(9) NOT NULL
    CHECK ( LENGTH("PassNumber") = 9)

);

CREATE TABLE "Airline" (
    "AirlineID" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    "Name" VARCHAR2(80) NOT NULL,
    UNIQUE ("Name"),
    "Headquarters" VARCHAR2(150) NOT NULL,
    "Contact" VARCHAR2(40) NOT NULL
);

-- The "Employee" table is a specialized entity derived from "Person".
-- It uses "PersonID" as its primary key, which also references the "Person" table.
CREATE TABLE "Employee" (
    "EmployeeID" INT PRIMARY KEY NOT NULL REFERENCES "Person"("PersonID"),
    "Position" VARCHAR2(100) NOT NULL,
    "Airline_id" int DEFAULT NULL,

    CONSTRAINT "fk_employee_airline"
    FOREIGN KEY ("Airline_id") REFERENCES "Airline"("AirlineID")
        ON DELETE SET NULL



);


CREATE TABLE "Passenger" (
    "PassengerID" INT PRIMARY KEY NOT NULL REFERENCES "Person"("PersonID"),
    "FrequentFlyer" INT NOT NULL ,
    CHECK ( "FrequentFlyer" = 1 OR "FrequentFlyer" = 0 )


);

CREATE TABLE "Airport" (
    "AirportID" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    "Name" VARCHAR2(255) NOT NULL,
    "Location" VARCHAR2(100) NOT NULL,
    "Contact" VARCHAR2(40) NOT NULL,
    UNIQUE ("Name")
);

CREATE TABLE "Aircraft" (
    "AircraftID" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    "Model" VARCHAR2(255) NOT NULL,
    "Capacity" INt NOT NULL,
    "Manufacturer" VARCHAR2(150) NOT NULL,
    "Year_of_manufacture" DATE NOT NULL ,
    CHECK ( "Year_of_manufacture" >= TO_DATE('1700-01-01', 'YYYY-MM-DD')
           AND "Year_of_manufacture" <= TO_DATE('2024-03-24', 'YYYY-MM-DD')),
    "airline_id" INT DEFAULT NULL,
    CONSTRAINT "fk_aircraft_airline"
        FOREIGN KEY ("airline_id") REFERENCES "Airline" ("AirlineID")
        ON DELETE SET NULL
);

CREATE TABLE "Flight" (
    "FlightID" INT NOT NULL,
    "DepartureDateTime" TIMESTAMP DEFAULT NULL,
    "ArrivalDateTime" TIMESTAMP DEFAULT NULL,
    "Status" VARCHAR2(100) NOT NULL,
    "aircraft_id" INT DEFAULT  NULL,
    "airport_id" INT DEFAULT  NULL,
    "airline_id" INT NOT NULL REFERENCES "Airline"("AirlineID"),
            CONSTRAINT "PK_Flight_Airline_id"
            PRIMARY KEY ("FlightID", "airline_id"),
    CONSTRAINT "fk_flight_aircraft"
        FOREIGN KEY ("aircraft_id") REFERENCES "Aircraft" ("AircraftID")
        ON DELETE SET NULL,
     CONSTRAINT "fk_flight_airport"
        FOREIGN KEY ("airport_id") REFERENCES "Airport" ("AirportID")
        ON DELETE SET NULL


);

CREATE TABLE "Seat" (
    "SeatID" INT GENERATED BY DEFAULT AS IDENTITY (START with 1 INCREMENT by 1) NOT NULL PRIMARY KEY,
    "Class" INT NOT NULL ,
    CHECK ( "Class" = 1 OR "Class" = 0 ),
    "Availability" INT NOT NULL

);
CREATE TABLE "Reservation" (
    "ReservationID" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    "Date" DATE NOT NULL ,
    "Status" VARCHAR2(100) NOT NULL ,
    "TotalPrice" DECIMAL(10,2) NOT NULL ,
    CHECK ( "TotalPrice" >= 0 ),
    "passenger_id" INT DEFAULT NULL ,
    "flight_id" INT DEFAULT NULL,
    "airline_flight_id" INT DEFAULT NULL,

     CONSTRAINT "fk_reservation_passenger"
        FOREIGN KEY ("passenger_id") REFERENCES "Passenger" ("PassengerID")
        ON DELETE SET NULL,
    CONSTRAINT "fk_reservation_flight"
        FOREIGN KEY ("flight_id","airline_flight_id") REFERENCES "Flight" ("FlightID", "airline_id")
        ON DELETE SET NULL
);

CREATE TABLE "Ticket" (
    "TicketID" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    "Price" DOUBLE PRECISION NOT NULL ,
    "Class" INT NOT NULL ,
    CHECK ( "Class" = 1 OR "Class" = 0 ),
    "SeatID" INT DEFAULT NULL ,
    "PassengerID" INT DEFAULT NULL ,
    "ReservationID" INT DEFAULT NULL,



    CONSTRAINT "fk_ticket_passenger"
    FOREIGN KEY ("PassengerID") REFERENCES "Passenger"("PassengerID")
        ON DELETE SET NULL,

    CONSTRAINT "fk_ticket_seat"
    FOREIGN KEY ("SeatID") REFERENCES "Seat"("SeatID")
        ON DELETE SET NULL,

    CONSTRAINT "fk_ticket_reservation"
    FOREIGN KEY ("ReservationID") REFERENCES "Reservation"("ReservationID")
        ON DELETE SET NULL

);



INSERT INTO "Person" ("FirstName", "LastName", "Email", "Phone", "Address", "Nationality", "PassNumber")
VALUES ('John', 'Doe', 'john.doe@email.com', 1234567890, '123 Main St', 'American', '123456789');

INSERT INTO "Person" ("FirstName", "LastName", "Email", "Phone", "Address", "Nationality", "PassNumber")
VALUES ('Jane', 'Smith', 'jane.smith@email.com', 9876543210, '456 Elm St', 'British', '987654321');

INSERT INTO "Person" ("FirstName", "LastName", "Email", "Phone", "Address", "Nationality", "PassNumber")
VALUES ('Oleg', 'Pop', 'oleg.pop@email.com', 9873331483, 'Time square', 'Ukrainian', 'GA6667771');

INSERT INTO "Person" ("FirstName", "LastName", "Email", "Phone", "Address", "Nationality", "PassNumber")
VALUES ('Alexa', 'Rivera', 'alexa.rivera@email.com', 9876543210, 'Central Park West', 'American', 'US1234567');

INSERT INTO "Person" ("FirstName", "LastName", "Email", "Phone", "Address", "Nationality", "PassNumber")
VALUES ('Marco', 'Gonzalez', 'marco.gonzalez@email.com', 9873216540, 'Golden Gate Bridge', 'Mexican', 'MX9876543');

INSERT INTO "Person" ("FirstName", "LastName", "Email", "Phone", "Address", "Nationality", "PassNumber")
VALUES ('Marco', 'Thompson', 'emma.thompson@email.com', 9871234567, 'Buckingham Palace', 'British', 'UK1234567');

INSERT INTO "Person" ("FirstName", "LastName", "Email", "Phone", "Address", "Nationality", "PassNumber")
VALUES ('Robin', 'Good', 'robin@email.com', 2221234567, 'Buckingham Palace', 'Slovak', 'UK1234564');

INSERT INTO "Person" ("FirstName", "LastName", "Email", "Phone", "Address", "Nationality", "PassNumber")
VALUES ('Olya', 'Belenik', 'olga@email.com', 3371234567, 'Buckingham Palace', 'British', 'UK1222567');

INSERT INTO "Person" ("FirstName", "LastName", "Email", "Phone", "Address", "Nationality", "PassNumber")
VALUES ('Justin', 'Thompson', 'justin.thompson@email.com', 1171234567, 'Buckingham Palace', 'British', 'UK1444567');

select * from "Person";

INSERT INTO "Airline" ("Name", "Headquarters", "Contact")
VALUES ('Cloud Airlines', 'Los Angeles, CA', '1-800-FLY-CLOUD');

INSERT INTO "Airline" ("Name", "Headquarters", "Contact")
VALUES ('Sky High Inc.', 'Los Angeles, CA', '1-800-SKY-HIGH');

INSERT INTO "Airline" ("Name", "Headquarters", "Contact")
VALUES ('Sky  Inc.', 'Los Angeles, CA', '1001');

INSERT INTO "Airline" ("Name", "Headquarters", "Contact")
VALUES ('SkyLine Inc.', 'Los Angeles, CA', '1111');

INSERT INTO "Airline" ("Name", "Headquarters", "Contact")
VALUES ('Sky Group', 'Los Angeles, CA', '16332');

INSERT INTO "Airline" ("Name", "Headquarters", "Contact")
VALUES ('Cloud Cruisers Ltd.', 'Seattle, WA', '999');

select * from "Airline";

INSERT INTO "Employee" ("EmployeeID", "Position", "Airline_id")
VALUES (1, 'Pilot', 1);

INSERT INTO "Employee" ("EmployeeID", "Position", "Airline_id")
VALUES (2, 'Pilot', 2);

INSERT INTO "Employee" ("EmployeeID", "Position", "Airline_id")
VALUES (3, 'Pilot', 2);

INSERT INTO "Employee" ("EmployeeID", "Position", "Airline_id")
VALUES (4, 'Pilot', 3);

INSERT INTO "Employee" ("EmployeeID", "Position", "Airline_id")
VALUES (5, 'Pilot', 3);

INSERT INTO "Employee" ("EmployeeID", "Position", "Airline_id")
VALUES (6, 'Pilot', 3);

select * from "Employee";

INSERT INTO "Passenger" ("PassengerID", "FrequentFlyer")
VALUES (7, 0);

INSERT INTO "Passenger" ("PassengerID", "FrequentFlyer")
VALUES (8, 0);

INSERT INTO "Passenger" ("PassengerID", "FrequentFlyer")
VALUES (9, 0);

select  * from "Passenger";

INSERT INTO "Airport" ("Name", "Location", "Contact")
VALUES ('JFK International Airport', 'New York City, NY', '1-800-JFK-INFO');

INSERT INTO "Airport" ("Name", "Location", "Contact")
VALUES ('Los Angeles International Airport', 'Los Angeles, CA', '1-800-LAX-INFO');

INSERT INTO "Airport" ("Name", "Location", "Contact")
VALUES ('Seattle International Airport', 'Seattle, WA', '1-800-SEA-PORT');

select * from "Airport";

INSERT INTO "Aircraft" ("Model", "Capacity", "Manufacturer", "Year_of_manufacture", "airline_id")
VALUES ('Boeing 737', 180, 'Boeing', TO_DATE('2020-01-01', 'YYYY-MM-DD'), 1);

INSERT INTO "Aircraft" ("Model", "Capacity", "Manufacturer", "Year_of_manufacture", "airline_id")
VALUES ('Airbus A320', 150, 'Airbus', TO_DATE('2022-01-01', 'YYYY-MM-DD'), 2);

INSERT INTO "Aircraft" ("Model", "Capacity", "Manufacturer", "Year_of_manufacture", "airline_id")
VALUES ('Boeing 654', 120, 'Boeing', TO_DATE('2022-01-01', 'YYYY-MM-DD'), 3);

select * from "Aircraft";

INSERT INTO "Flight" ("FlightID", "DepartureDateTime", "ArrivalDateTime", "Status", "aircraft_id", "airport_id", "airline_id")
VALUES (123, TO_TIMESTAMP('2024-02-11 10:00:00', 'YYYY-MM-DD HH24:MI:SS'),
        TO_TIMESTAMP('2024-04-01 14:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'On Time', 1, 1, 1);

INSERT INTO "Flight" ("FlightID", "DepartureDateTime", "ArrivalDateTime", "Status", "aircraft_id", "airport_id", "airline_id")
VALUES (124, TO_TIMESTAMP('2024-04-01 10:00:00', 'YYYY-MM-DD HH24:MI:SS'),
        TO_TIMESTAMP('2024-04-01 14:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'On Time', 2, 2, 2);

INSERT INTO "Flight" ("FlightID", "DepartureDateTime", "ArrivalDateTime", "Status", "aircraft_id", "airport_id", "airline_id")
VALUES (125, TO_TIMESTAMP('2024-11-22 10:00:00', 'YYYY-MM-DD HH24:MI:SS'),
        TO_TIMESTAMP('2024-04-01 14:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Delayed', 3, 2, 3);

select * from "Flight";

INSERT INTO "Seat" ("Class", "Availability")
VALUES (0, 0);
INSERT INTO "Seat" ("Class", "Availability")
VALUES (1, 0);
INSERT INTO "Seat" ("Class", "Availability")
VALUES (1, 0);
INSERT INTO "Seat" ("Class", "Availability")
VALUES (1, 1);

select * from "Seat";



INSERT INTO "Reservation" ("Date", "Status", "TotalPrice","passenger_id",  "flight_id", "airline_flight_id")
VALUES (TO_DATE('2024-01-10', 'YYYY-MM-DD'), 'Confirmed', 200.00, 7,   123, 1);

INSERT INTO "Reservation" ("Date", "Status", "TotalPrice","passenger_id","flight_id", "airline_flight_id")
VALUES (TO_DATE('2023-09-11', 'YYYY-MM-DD'), 'Pending', 140.00,8,   124, 2);

INSERT INTO "Reservation" ("Date", "Status", "TotalPrice","passenger_id","flight_id", "airline_flight_id")
VALUES (TO_DATE('2023-06-12', 'YYYY-MM-DD'), 'Cancelled', 60.00,9, 125, 3);

select * from "Reservation";

INSERT INTO "Ticket" ("Price", "Class", "PassengerID", "SeatID","ReservationID")
VALUES (200.00, 0, 7, 1,1);

INSERT INTO "Ticket" ("Price", "Class", "PassengerID", "SeatID", "ReservationID")
VALUES (140.00, 1, 8, 2,2);

INSERT INTO "Ticket" ("Price", "Class", "PassengerID", "SeatID", "ReservationID")
VALUES (60.00, 1, 9, 3, 3);

select  * from "Ticket";

--show reservation which total price is more than 100.00 - spojení tří tabulek
SELECT  "Date", "Status", "TotalPrice"
       From "Reservation"
       JOIN "Passenger" ON "Reservation"."passenger_id" = "Passenger"."PassengerID"
       JOIN "Ticket" ON "Reservation"."ReservationID" = "Ticket"."ReservationID"
        WHERE "TotalPrice" > 100.00;


--show airlines which located in LA and have two and more employees - GRPOUP BY a agregacni funkci
SELECT "Airline"."AirlineID", "Airline"."Name", "Airline"."Headquarters", "Airline"."Contact", COUNT("Employee"."EmployeeID") as "NumberOfEmployees"
FROM "Airline"
JOIN "Employee" ON "Airline"."AirlineID" = "Employee"."Airline_id"
WHERE "Airline"."Headquarters" = 'Los Angeles, CA'
GROUP BY "Airline"."AirlineID", "Airline"."Name", "Airline"."Headquarters", "Airline"."Contact"
HAVING COUNT("Employee"."EmployeeID")>1;



-- show number and nationality of persons (descending order) - GRPOUP BY a agregacni funkci
SELECT COUNT("PersonID"), "Nationality"
FROM "Person"
GROUP BY "Nationality"
ORDER BY COUNT("PersonID") DESC;

-- This selects passengers with confirmed reservations, ensuring each reservation has a corresponding flight record in the database using the EXISTS predicate.
SELECT p."FirstName", p."LastName", r."flight_id"
FROM "Person" p
JOIN "Passenger" pa ON p."PersonID" = pa."PassengerID"
JOIN "Reservation" r ON pa."PassengerID" = r."passenger_id"
WHERE r."Status" = 'Confirmed'
  AND EXISTS (
    SELECT 1
    FROM "Flight" f
    WHERE f."FlightID" = r."flight_id" AND f."airline_id" = r."airline_flight_id"
  );


-- Find passengers with Pending reservations exceeding $100.00 using the IN predicate with a nested select.
SELECT p."FirstName", p."LastName", r."flight_id"
FROM "Person" p
JOIN "Passenger" pa ON p."PersonID" = pa."PassengerID"
JOIN "Reservation" r ON pa."PassengerID" = r."passenger_id"
WHERE r."Status" = 'Pending'
  AND r."TotalPrice" > 100.00;


-- This query retrieves the airline name , model, and capacity provided.
SELECT a."Name", ac."Model", ac."Capacity"
FROM "Airline" a
JOIN "Aircraft" ac ON a."AirlineID" = ac."airline_id";

-- This query shows how many flights for every airport
SELECT a."Name" AS AirportName, COUNT(*) AS NumberOfFlights
FROM "Airport" a
JOIN "Flight" f ON a."AirportID" = f."airport_id"
GROUP BY a."Name";

-- Trigger that update frequent_flyer in Passenger when passenger have more than 5 reservations last year
CREATE OR REPLACE TRIGGER "update_frequent_flyer"
before INSERT ON "Reservation"
FOR EACH ROW
DECLARE
  numFlights NUMBER;
BEGIN
  SELECT COUNT(*) INTO numFlights
  FROM "Reservation"
  WHERE "passenger_id" = :NEW."passenger_id"
    AND "Date" > ADD_MONTHS(SYSDATE, -12);
  IF numFlights >= 4 THEN
    UPDATE "Passenger"
    SET "FrequentFlyer" = 1
    WHERE "PassengerID" = :NEW."passenger_id";
  END IF;
END;
/
-- Trigger demonstration
INSERT INTO "Reservation" ("Date", "Status", "TotalPrice","passenger_id",  "flight_id", "airline_flight_id")
    VALUES (ADD_MONTHS(SYSDATE, -1), 'Confirmed', 200.00, 7,123, 1);
INSERT INTO "Reservation" ("Date", "Status", "TotalPrice","passenger_id",  "flight_id", "airline_flight_id")
    VALUES (ADD_MONTHS(SYSDATE, -1), 'Confirmed', 200.00, 7,124, 2);
INSERT INTO "Reservation" ("Date", "Status", "TotalPrice","passenger_id",  "flight_id", "airline_flight_id")
    VALUES (ADD_MONTHS(SYSDATE, -1), 'Confirmed', 200.00, 7,125, 3);
INSERT INTO "Reservation" ("Date", "Status", "TotalPrice","passenger_id",  "flight_id", "airline_flight_id")
    VALUES (ADD_MONTHS(SYSDATE, -1), 'Confirmed', 200.00, 7,125, 3);


SELECT * from "Passenger";

select * from "Ticket";

-- Trigger that update seat after insert a ticket
CREATE OR REPLACE TRIGGER "ticket_creation_check"
BEFORE INSERT ON "Ticket"
FOR EACH ROW
DECLARE
    l_availability NUMBER;
BEGIN
  SELECT "Availability" INTO l_availability
  FROM "Seat"
  WHERE "SeatID" = :NEW."SeatID";

  IF (l_availability = 0) THEN
    RAISE_APPLICATION_ERROR(-20000, 'Selected seat is unavailable');
  ELSE
    UPDATE "Seat"
    SET "Availability" = 0
    WHERE "SeatID" = :NEW."SeatID";
  END IF;
END;
/
-- Trigger demonstration
INSERT INTO "Ticket" ("Price", "Class", "SeatID") VALUES (100.00, 1, 4);
------------------------------------------------------
-- This query retrieves information about flights and their departure time, arrival time, current status (Upcoming, Ongoing, or Landed), departure airport, arrival airport, and the operating airline
WITH flight_data AS (
  SELECT f."FlightID", f."DepartureDateTime", f."ArrivalDateTime", f."Status", a."Name" AS DepartureAirport, a2."Name" AS ArrivalAirport, air."Name" AS Airline
  FROM "Flight" f
  JOIN "Aircraft" ac ON f."aircraft_id" = ac."AircraftID"
  JOIN "Airline" air ON f."airline_id" = air."AirlineID"
  JOIN "Airport" a ON f."airport_id" = a."AirportID"
  JOIN "Airport" a2 ON f."airport_id" = a2."AirportID"
)
SELECT flight_data.*,
       CASE WHEN "DepartureDateTime" > CURRENT_TIMESTAMP THEN 'Upcoming'
            WHEN "DepartureDateTime" < CURRENT_TIMESTAMP AND "ArrivalDateTime" > CURRENT_TIMESTAMP THEN 'Ongoing'
            ELSE 'Landed'
       END AS FlightStatus
FROM flight_data;



-- EXPLAIN PLAN ------------------------------------
-- find a count of employees in airlines which are located in Los Angeles, CA.
EXPLAIN PLAN FOR
SELECT a."AirlineID", a."Name", COUNT(e."EmployeeID") AS "NumberOfEmployees"
FROM "Employee" e
JOIN "Airline" a ON e."Airline_id" = a."AirlineID"
WHERE a."Headquarters" = 'Los Angeles, CA'
GROUP BY a."AirlineID", a."Name"
HAVING COUNT(e."EmployeeID") > 1;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);
-- creation of index on column "Headquarters" table "Airline"
CREATE INDEX "idx_airline_headquarters" ON "Airline"("Headquarters");

EXPLAIN PLAN FOR
SELECT a."AirlineID", a."Name", COUNT(e."EmployeeID") AS "NumberOfEmployees"
FROM "Employee" e
JOIN "Airline" a ON e."Airline_id" = a."AirlineID"
WHERE a."Headquarters" = 'Los Angeles, CA'
GROUP BY a."AirlineID", a."Name"
HAVING COUNT(e."EmployeeID") > 1;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

----MATERIALIZED VIEW-----------------------------
--write a number of reservations  of each season
--this code run my teammate
CREATE MATERIALIZED VIEW "reservation_by_season" AS
SELECT
    CASE
        WHEN EXTRACT(MONTH FROM "Date") IN (12, 1, 2) THEN 'Winter'
        WHEN EXTRACT(MONTH FROM "Date") IN (3, 4, 5) THEN 'Spring'
        WHEN EXTRACT(MONTH FROM "Date") IN (6, 7, 8) THEN 'Summer'
        WHEN EXTRACT(MONTH FROM "Date") IN (9, 10, 11) THEN 'Autumn'
    END AS "Season",
    COUNT(*) AS "ReservationCount"
FROM "Reservation"
GROUP BY
    CASE
        WHEN EXTRACT(MONTH FROM "Date") IN (12, 1, 2) THEN 'Winter'
        WHEN EXTRACT(MONTH FROM "Date") IN (3, 4, 5) THEN 'Spring'
        WHEN EXTRACT(MONTH FROM "Date") IN (6, 7, 8) THEN 'Summer'
        WHEN EXTRACT(MONTH FROM "Date") IN (9, 10, 11) THEN 'Autumn'
    END;


SELECT * FROM "reservation_by_season";
--change date in first reservation
UPDATE "Reservation" SET "Date" = TO_DATE('2024-04-10', 'YYYY-MM-DD') WHERE "ReservationID" = 1;
-- data will not be initialized , should refresh  materialized view manually
SELECT * FROM "reservation_by_season";

--------Procedures-----------------------------------------
-----change the user's email by their ID
CREATE OR REPLACE PROCEDURE UpdatePassengerEmail (
  passenger_id IN NUMBER,
  new_email IN VARCHAR2
)
IS
  person_rec "Person"%ROWTYPE;
BEGIN
  UPDATE "Person"
  SET "Email" = new_email
  WHERE "PersonID" = passenger_id;

  IF SQL%ROWCOUNT = 0 THEN
    DBMS_OUTPUT.PUT_LINE('Error: Passenger with ID ' || passenger_id || ' not found.');
  ELSE
    DBMS_OUTPUT.PUT_LINE('Passenger email updated successfully.');
  END IF;

EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unexpected error occurred.');
END;
/

BEGIN UPDATEPASSENGEREMAIL(9,'newmail@email.com'); END;
SELECT * FROM "Person";

--find employee by airline id and position------
CREATE OR REPLACE PROCEDURE FindEmployeesByAirline (
    airline_id IN NUMBER,
    position   IN VARCHAR2 DEFAULT NULL
)
IS
  emp_rec   "Employee"%ROWTYPE;
  emp_cursor SYS_REFCURSOR;
BEGIN
  OPEN emp_cursor FOR
    SELECT *
    FROM "Employee"
    WHERE "Airline_id" = airline_id
      AND (position IS NULL OR position = "Employee"."Position");

  LOOP
    FETCH emp_cursor INTO emp_rec;

    EXIT WHEN emp_cursor%NOTFOUND;

    DBMS_OUTPUT.PUT_LINE(emp_rec."EmployeeID" || ' - ' || emp_rec."Position");
  END LOOP;

  CLOSE emp_cursor;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(' Error with cursor');
    CLOSE emp_cursor;
END;
/

BEGIN FindEmployeesByAirline(2,'Pilot'); END;


-- Privileges
GRANT ALL ON "Airport" to XBENCS00;
GRANT ALL ON "Airline" to XBENCS00;
GRANT ALL ON "Airport" to XBENCS00;
GRANT ALL ON "Employee" to XBENCS00;
GRANT ALL ON "Flight" to XBENCS00;
GRANT ALL ON "Passenger" to XBENCS00;
GRANT ALL ON "Person" to XBENCS00;
GRANT ALL ON "Reservation" to XBENCS00;
GRANT ALL ON "Seat" to XBENCS00;
GRANT ALL ON "Ticket" to XBENCS00;
GRANT ALL ON "reservation_by_season" to XBENCS00;
GRANT EXECUTE ON FINDEMPLOYEESBYAIRLINE to XBENCS00;
GRANT EXECUTE ON UPDATEPASSENGEREMAIL to XBENCS00;
